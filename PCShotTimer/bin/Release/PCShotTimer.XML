<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCShotTimer</name>
    </assembly>
    <members>
        <member name="T:PCShotTimer.RadioButtonCheckedConverter">
            <summary>
            RadioButton Converter.
            </summary>
        </member>
        <member name="M:PCShotTimer.RadioButtonCheckedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the RadioButton value to a True/False string.
            </summary>
            <param name="radioButton">The RadioButton object.</param>
            <param name="targetType">TODO ??</param>
            <param name="value">The RadioButton value.</param>
            <param name="culture">Culture to use.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:PCShotTimer.RadioButtonCheckedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a True/False string to a RadioButton value.
            </summary>
            <param name="value">The RadioButton value.</param>
            <param name="targetType">TODO ??</param>
            <param name="radioButton">The RadioButton object.</param>
            <param name="culture">Culture to use.</param>
            <returns></returns>
        </member>
        <member name="T:PCShotTimer.openshottimer.AmplitudeSpikeShotDetector">
            <summary>
            With a .45 I found that it spikes at for 18 milliseconds with a dense number of samples and then drops off.
            When the first big sample comes in count it as a shot and then stop listening for .12 seconds.
            </summary>
        </member>
        <member name="T:PCShotTimer.openshottimer.ShotDetector">
            <summary>
            Base class for different shot detection algorithms.
            </summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.ShotDetector._sampleRate">
            <summary>Number of samples per second</summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.ShotDetector._sampleSizeInBits">
            <summary>Size of the audio samples in bits</summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.ShotDetector._sampleSizeInBytes">
            <summary>Size of the audio samples in bytes</summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.ShotDetector._samplesPerMillisecond">
            <summary>Number of audio samples per millisecond at the current sample rate</summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.ShotDetector._currentSample">
            <summary>Current sample in the timeline that was last received from the capturer.</summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.ShotDetector._shotTimer">
            <summary>A stopwatch that will be used to know when shots occured.</summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.ShotDetector._shotCount">
            <summary>Number of shots detected to far.</summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.ShotDetector._lastShotSample">
            <summary>Indicates the last shot time that occured.</summary>
        </member>
        <member name="M:PCShotTimer.openshottimer.ShotDetector.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of ShotDetector.
            </summary>
            <param name="sampleRate">Format of the audio that will be provided to this detector.</param>
            <param name="sampleSizeInBits">Application config properties.</param>
        </member>
        <member name="M:PCShotTimer.openshottimer.ShotDetector.ProcessAudio(System.IO.MemoryStream)">
            <summary>
            Process the audio to find shot sounds.
            </summary>
            <param name="audioData">The audio data to analyze</param>
            <returns>Detected shots in a ShotEvent array</returns>
        </member>
        <member name="M:PCShotTimer.openshottimer.ShotDetector.p_processAudio(System.IO.MemoryStream)">
            <summary>
            Process the audio to find shot sounds. This method is used by p_processAudio()
            Implement your own shot detection here.
            </summary>
            <param name="audioData">The audio data to analyze</param>
            <returns>Detected shots in a ShotEvent array</returns>
        </member>
        <member name="M:PCShotTimer.openshottimer.ShotDetector.Reset">
            <summary>
            Resets this Shot Detector.
            </summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.AmplitudeSpikeShotDetector._ignoreUntilSample">
            <summary>Used to ignore samples until the buffer is large enough.</summary>
        </member>
        <member name="F:PCShotTimer.openshottimer.AmplitudeSpikeShotDetector._samplesAboveThresholdRequired">
            <summary>Number of samples with a spike required to consider a gunshot has occured. The lower the more sensitive.</summary>
        </member>
        <member name="M:PCShotTimer.openshottimer.AmplitudeSpikeShotDetector.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of AmplitudeSpikeShotDetector.
            This shot detector detects noise spike.
            </summary>
            <param name="sampleRate">Format of the audio that will be provided to this detector.</param>
            <param name="sampleSizeInBits">Application config properties.</param>
            <param name="samplesAboveThresholdRequired">Number of samples with a spike required to consider a gunshot has occured. The lower the more sensitive.</param>
        </member>
        <member name="M:PCShotTimer.openshottimer.AmplitudeSpikeShotDetector.p_processAudio(System.IO.MemoryStream)">
            <summary>
            Detects noise spike.
            </summary>
            <param name="buffer">The audio data.</param>
            <returns>Array of ShotEvent containing the shots found from this audio data.</returns>
        </member>
        <member name="M:PCShotTimer.openshottimer.AmplitudeSpikeShotDetector.Reset">
            <summary>
            Resets this Shot Detector.
            </summary>
        </member>
        <member name="T:PCShotTimer.openshottimer.ShotEvent">
            <summary>
            A Shot event contains:
            - a number (the shot number)
            - a number of ms since the beginning for that shot
            - a number of ms since the last shot
            </summary>
        </member>
        <member name="M:PCShotTimer.openshottimer.ShotEvent.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of ShotEvent.
            </summary>
            <param name="shotNum">The number of this shot in the timeline.</param>
            <param name="time">Time shot occured in milliseconds since the beginning of the timeline.</param>
            <param name="prevTime">Previous time shot occured in milliseconds.</param>
        </member>
        <member name="M:PCShotTimer.openshottimer.ShotEvent.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of ShotEvent.
            </summary>
            <param name="shotNum">The number of this shot in the timeline.</param>
            <param name="time">Time shot occured in milliseconds since the beginning of the timeline.</param>
        </member>
        <member name="P:PCShotTimer.openshottimer.ShotEvent.ShotNum">
            <summary>Gets or sets the number/Id of this shot in the timeline.</summary>
        </member>
        <member name="P:PCShotTimer.openshottimer.ShotEvent.Time">
            <summary>Gets or sets the shot time that occured in milliseconds since the beginning of the timeline.</summary>
        </member>
        <member name="P:PCShotTimer.openshottimer.ShotEvent.Split">
            <summary>
            Gets or sets the time between this shot and the last shot (or the beginning of the timeline for the first shot).
            Also in milliseconds
            </summary>
        </member>
        <member name="T:PCShotTimer.OptionsData">
            <summary>
            Container for the options.
            </summary>
        </member>
        <member name="M:PCShotTimer.OptionsData.#ctor">
            <summary>
            Initializes a new instance of OptionsData.
            </summary>
        </member>
        <member name="M:PCShotTimer.OptionsData.#ctor(PCShotTimer.OptionsData)">
            <summary>
            Initializes a new instance of OptionsData, creating a copy of another OptionsData object.
            </summary>
            <param name="options">The OptionsData object data to copy into this new instance.</param>
        </member>
        <member name="M:PCShotTimer.OptionsData.#ctor(System.String)">
            <summary>
            Initializes a new instance of OptionsData, loading options from a file.
            </summary>
            <param name="xmlPath">The XML file containing the options to put into that new instance.</param>
        </member>
        <member name="M:PCShotTimer.OptionsData.Save(System.String)">
            <summary>
            Save the options to an XML file.
            </summary>
            <param name="savePath">XML file that will be created.</param>
        </member>
        <member name="M:PCShotTimer.OptionsData.Load(System.String)">
            <summary>
            Load options from a XML file.
            </summary>
            <param name="xmlPath">The XML file containing the options to load.</param>
            <returns>A OptionData object.</returns>
        </member>
        <member name="M:PCShotTimer.OptionsData.Update(PCShotTimer.OptionsData)">
            <summary>
            Update this instance with another OptionsData.
            </summary>
            <param name="optionsData">The options that will update that instance data.</param>
            <returns>The given options.</returns>
        </member>
        <member name="M:PCShotTimer.OptionsData.Clone">
            <summary>
            Create a copy of this OptionsData instance.
            </summary>
            <returns>A new OptionsData instance containing the same stuff.</returns>
        </member>
        <member name="P:PCShotTimer.OptionsData.GeneralRandomDelay">
            <summary>Gets or sets wether the beep shall have a random delay after pressing Start.</summary>
        </member>
        <member name="P:PCShotTimer.OptionsData.GeneralRandomStartDelayMin">
            <summary>Gets or sets the beep minimum delay (secs).</summary>
        </member>
        <member name="P:PCShotTimer.OptionsData.GeneralRandomStartDelayMax">
            <summary>Gets or sets the beep maximum delay (secs).</summary>
        </member>
        <member name="P:PCShotTimer.OptionsData.GeneralLoopTimer">
            <summary>Gets or sets whether the shot timer shall loop until pressing Stop.</summary>
        </member>
        <member name="P:PCShotTimer.OptionsData.InputSampleRate">
            <summary>Default sample rate for the mic input.</summary>
        </member>
        <member name="P:PCShotTimer.OptionsData.InputSampleBits">
            <summary>Default sample bits for the mic input.</summary>
        </member>
        <member name="P:PCShotTimer.OptionsData.InputChannels">
            <summary>Default channel number for the mic input (stereo/mono).</summary>
        </member>
        <member name="P:PCShotTimer.OptionsData.DetectorSensitivity">
            <summary>
            This is actually the number of time (or samples) a high audio spike is detected before being counted as a 'shot'.
            So the lower, the more sensitive it is.
            </summary>
        </member>
        <member name="P:PCShotTimer.OptionsData.SoundPlayReadyStandby">
            <summary>Defines if there should be a speech before the beep.</summary>
        </member>
        <member name="T:PCShotTimer.ShotEventArgs">
            <summary>
            ShotEventArgs just extends EventArgs real quick so a ShotEvent array can be bundled with an Event.
            </summary>
        </member>
        <member name="M:PCShotTimer.ShotEventArgs.#ctor(PCShotTimer.openshottimer.ShotEvent[])">
            <summary>
            Initializes a new instance of ShotEventArgs.
            Yeah well, I was like, this will be pretier using a constructor instead of new ShotEventArgs { Shots = stuffff }
            </summary>
            <param name="shots">The shots to bundle inside this EventArgs.</param>
        </member>
        <member name="P:PCShotTimer.ShotEventArgs.Shots">
            <summary>Gets or sets the detected Shots into this EventArg.</summary>
        </member>
        <member name="T:PCShotTimer.ShotTimer">
            <summary>
            This class handles the shot timer behaviors:
            - Starting the timer and managing a random delay before beeping
            - Analyzing mic input to detect shots fired
            - TODO Implementing PAR loops
            </summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer.DEFAULT_TIMER_VALUE">
            <summary>Default timer value returned by TimeElapse when nothing is going on.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer.TIME_ELAPSE_UPDATE_MS">
            <summary>Indicates how many milliseconds shall pass before PropertyChanging the TimeElapse property.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer.SOUNDS_DIRECORY_NAME">
            <summary>Subdirectory in the app folder that contains the sound files.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._stopWatch">
            <summary>The shot timer Stopwatch.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._dispatcherTimer">
            <summary>This DispatcherTimer is used to trigger PropertyChange every tick (as there is no Tick event on the Stopwatch object).</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._randomDelay">
            <summary>The random delay Timer.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._random">
            <summary>A Random object.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._beepSoundPlayer">
            <summary>A SoundPlayer object only used to play the BEEP.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._soundPlayer">
            <summary>A SoundPlayer object .</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._soundsDirectory">
            <summary>The SFX directory used by ShotTimer.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._waveIn">
            <summary>Wave In device</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._shotDetector">
            <summary>Shot detector class.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._readyStandySound">
            <summary>Contains all the ReadyStandy sounds found from the SoundFolder.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._beepSound">
            <summary>Contains all the Beep sounds found from the SoundFolder.</summary>
        </member>
        <member name="F:PCShotTimer.ShotTimer._stopRequested">
            <summary>Indicates that a we want to Stop the time.</summary>
        </member>
        <member name="M:PCShotTimer.ShotTimer.#ctor(PCShotTimer.OptionsData,System.EventHandler,NAudio.Wave.WaveInEvent)">
            <summary>
            Initializes a new instance of ShotTimerClass.
            </summary>
            <param name="options">Options used by this timer.</param>
            <param name="shotFiredEvent">Mehtod to call when a shot has been detected.</param>
            <param name="waveIn">The Wave in device that will be used to capture sound.</param>
        </member>
        <member name="M:PCShotTimer.ShotTimer.Start">
            <summary>
            "Starts" the shot timer.
            - First will ask if shooter ready.
            - Then will wait a certain dealy before beeping, if applicable
            - Finally, will start the real deal and detect shot and stuff
            </summary>
        </member>
        <member name="M:PCShotTimer.ShotTimer.Stop">
            <summary>
            Stops the shot timer.
            </summary>
        </member>
        <member name="M:PCShotTimer.ShotTimer.Reset">
            <summary>
            Resets this Shot Timer.
            </summary>
        </member>
        <member name="M:PCShotTimer.ShotTimer.HumanReadableMs(System.TimeSpan)">
            <summary>
            Transform a number of milliseconds into a human readable format
            minutes:seconds:millis
            </summary>
            <param name="timeSpan">A TimeSpan object to read</param>
            <returns>Human readable string.</returns>
        </member>
        <member name="M:PCShotTimer.ShotTimer.PlayReadyStandbySound">
            <summary>
            Plays a random shooter ready and standby sound
            And then proceeds to wait a certain dealy before beeping, if applicable
            Finally, start the real deal and detect shot and stuff
            </summary>
        </member>
        <member name="M:PCShotTimer.ShotTimer.BeepDelay">
            <summary>
            Waits for a period of time before beeping.
            - If random beeping is activtated then will wait between _randomStartDelayMin and _randomStartDelayMax.
            - Or else the min value is applied.
            </summary>
        </member>
        <member name="M:PCShotTimer.ShotTimer.StartForReal">
            <summary>
            Starts the timer -- for real -- as this occurs after any random delay, if there was one.
            </summary>
        </member>
        <member name="M:PCShotTimer.ShotTimer.RandomDelayElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Triggered once the random delay is finished.
            Right after we start the real timer.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.ShotTimer.OnDispatcherTimerTick(System.Object,System.EventArgs)">
            <summary>
            For every tick, the TimeElapsed property is notified as PropertyChanged
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Events</param>
        </member>
        <member name="M:PCShotTimer.ShotTimer.ReadingAvailableAudioData(System.Object,NAudio.Wave.WaveInEventArgs)">
            <summary>
            Triggered regulary with wave input data.
            Here we will analyze the audio data and detect shots.
            When shots are detected the ShotFired() is invoked.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">WaveInEventArgs. This one has a buffer byte array that represents audio data.</param>
        </member>
        <member name="P:PCShotTimer.ShotTimer.ShotFired">
            <summary>Gets or sets the ShotFired event that is triggered when a shot sound is detected.</summary>
        </member>
        <member name="P:PCShotTimer.ShotTimer.SoundsDirectory">
            <summary>Gets or sets the SFX directory used by ShotTimer.</summary>
        </member>
        <member name="E:PCShotTimer.ShotTimer.PropertyChanged">
            <summary>PropertyChanged event used by TimeElapsed to nofity any binding that the value has changed.</summary>
        </member>
        <member name="P:PCShotTimer.ShotTimer.TimeElapsed">
            <summary>Total time elapsed since the Shot timer has been started.</summary>
        </member>
        <member name="P:PCShotTimer.ShotTimer.Options">
            <summary>Gets or sets the Options used by the timer.</summary>
        </member>
        <member name="T:PCShotTimer.OptionsWindow">
            <summary>
            Interaction logic for OptionsWindow.xaml
            </summary>
            <summary>
            OptionsWindow
            </summary>
        </member>
        <member name="M:PCShotTimer.OptionsWindow.#ctor(PCShotTimer.OptionsData)">
            <summary>
            Initializes a new instance of OptionsWindow.
            </summary>
            <param name="options">The OptionsData to load that window with</param>
        </member>
        <member name="M:PCShotTimer.OptionsWindow.Window_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Closing the window will be canceled, instead it will be hidden.
            ShowDialog() will return null
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.OptionsWindow.ButtonOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            OK the config, ShowDialog() will return 0
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.OptionsWindow.ButtonCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cancel, ShowDialog() will return null
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.OptionsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:PCShotTimer.OptionsWindow.Options">
            <summary>The options.</summary>
        </member>
        <member name="T:PCShotTimer.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="F:PCShotTimer.App.DefaultConfigFileName">
            <summary>File name for the dafault config.</summary>
        </member>
        <member name="F:PCShotTimer.App.AppDirectory">
            <summary>Location the assembly directory.</summary>
        </member>
        <member name="M:PCShotTimer.App.#ctor">
            <summary>
            Entry point for the app.
            </summary>
        </member>
        <member name="M:PCShotTimer.App.UnhandledException(System.Object,System.Windows.Threading.DispatcherUnhandledExceptionEventArgs)">
            <summary>
            Triggered when unhandled exceptions occurs.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.App.FatalError(System.Exception)">
            <summary>
            Fatal error msgbox and exits
            </summary>
            <param name="exception">The exception responsible.</param>
        </member>
        <member name="M:PCShotTimer.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:PCShotTimer.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:PCShotTimer.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="F:PCShotTimer.MainWindow._shotTimer">
            <summary>Shot timer.</summary>
        </member>
        <member name="F:PCShotTimer.MainWindow._ledGreenBlinking">
            <summary>Blinking animation for the Green LED</summary>
        </member>
        <member name="F:PCShotTimer.MainWindow._timerBlinking">
            <summary>Blinking animation for big ass timer.</summary>
        </member>
        <member name="F:PCShotTimer.MainWindow._options">
            <summary>Program options.</summary>
        </member>
        <member name="F:PCShotTimer.MainWindow._optionsWindow">
            <summary>The options window.</summary>
        </member>
        <member name="M:PCShotTimer.MainWindow.#ctor">
            <summary>
            Creates the main window.
            </summary>
        </member>
        <member name="M:PCShotTimer.MainWindow.Initialize">
            <summary>
            Initialize... stuff.
            </summary>
        </member>
        <member name="M:PCShotTimer.MainWindow.Clear">
            <summary>
            Clear the Shot Timer so it is reseted to a defautl state.
            </summary>
        </member>
        <member name="M:PCShotTimer.MainWindow.Exit">
            <summary>
            Exit the app.
            </summary>
        </member>
        <member name="M:PCShotTimer.MainWindow.WhenShotDetected(System.Object,System.EventArgs)">
            <summary>
            Triggered when a shot has been detected.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">A special ShotEventArgs that just bundles a ShotEvent array of found shots.</param>
        </member>
        <member name="M:PCShotTimer.MainWindow.ButtonStart_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Start the shot timer
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.MainWindow.ButtonStop_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Stop the timer.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.MainWindow.ButtonClear_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Clear the Shot Timer so it is reseted to a defautl state.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.MainWindow.ButtonOptions_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Show to options screen.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.MainWindow.ButtonExit_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Exits the app
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.MainWindow.WinMainWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Closing the window.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.MainWindow.WinMainWindow_Closed(System.Object,System.EventArgs)">
            <summary>
            Window is closed.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event</param>
        </member>
        <member name="M:PCShotTimer.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PCShotTimer.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PCShotTimer.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PCShotTimer.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
